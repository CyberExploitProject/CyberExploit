#!/bin/bash

#===============================================================================================
#The purpose of this program is to automate the testing of the CyberExploit project. ===========
#===============================================================================================

#Declaration of variables
message_usage="Usage:  bash  auto.sh  <path to payloads file>  <max nb of brokers>\n"
message_errArgsNbIncorrect="ERROR !\n  -> Illegal number of arguments.\n"

GREEN='\033[0;32m'
NC='\033[0m' # No Color



#If there are not the right number of arguments, an error message will be displayed.
if [ "$#" -ne 2 ]; then
	echo -e $message_errArgsNbIncorrect
	echo -e $message_usage

#Otherwise we'll continue
else
	echo -e "\n\tT H E   C Y B E R E X P L O I T   P R O J E C T\n\n"

	#Log file creation
	logFileName=$(date +"%Y-%m-%d_%T").log
	touch ./Logs/$logFileName


	#Number of payloads/scenarios to test
  nbPayloads=$(wc -l < $1)


	#The number of loops to be completed is calculated as a function of the number of brokers.
  restPayloads=$(($nbPayloads % $2))

	if [ "$restPayloads" -eq 0 ]; then
		nbLoops=$(($nbPayloads / $2))
		restPayloads=$2
	else
		nbLoops=$(($nbPayloads / $2))
		nbLoops=$(($nbLoops + 1))
	fi

	echo -e " *General information:"
	echo -e "    --> Path to the scenarios file:                $(readlink -f $1)"
	echo -e "    --> Number of scenarios to test:               $nbPayloads"
	echo -e "    --> Max number of brokers at the same time:    $2"
	echo -e "    --> Number of loops:                           $nbLoops\n"


	#The configuration information of the attack script is modified accordingly.
	echo -n -e " *Editing attack script configuration file ... "
	echo -e "start=False\nactualLoop=1\nnbLoops=$nbLoops\nnbOfBrokers=$2\nlastNbOfBrokersForLastLoop=$restPayloads" > ./Brokers_AttackContainer_Network/AttackContainer_Network/Python/Scripts/script.conf
	echo -e "${GREEN}done${NC}\n"


	#We copy the payloads/scenarios to the right directory.
	echo -n -e " *Copying scenarios into the attack folder ... "
	cat $1 > ./Brokers_AttackContainer_Network/AttackContainer_Network/Python/Scripts/payloads.txt
	echo -e "${GREEN}done${NC}\n"


	#We edit the docker-compose file of the attack script and the network AND we deploy them.
	echo -n -e " *Preparing the attack container ... "
	python3 docker-compose-editor.py 192.168.100.0 $2 attack > ./Logs/$logFileName
	echo -e "${GREEN}done${NC}\n"
	echo -e " *Deploying the attack container ... "
	cd ./Brokers_AttackContainer_Network/AttackContainer_Network/
	docker-compose up --build >> ../../Logs/$logFileName
	cd ../../


	#We deploy our brokers according to the ones we need + attack phase + recovery of logs
	for (( i = 1; i <= $nbLoops; i++ )); do

		echo -e "\n\n *Loop  $i /  $nbLoops"

		#If NOT last loop
		if [[ $i != $nbLoops ]]; then
			#We edit the docker-composes file with the right number of brokers and deploy them
			echo -n -e "    --> Preparing $2 broker(s) container(s) ... "
			python3 docker-compose-editor.py 192.168.100.0 $2 brokers >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}"
			echo -e "    --> Deploying $2 broker(s) container(s) ... "
			cd ./Brokers_AttackContainer_Network/Brokers/
			docker-compose up -d --build >> ../../Logs/$logFileName
			cd ../../

			#Luanch of attack script
			echo -n -e "    --> Running the attack container ... "
		  docker start -a attack >> ./Logs/$logFileName
			bash ./pause.sh >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}"

			#Logs recovery
			echo -n -e "    --> Getting the broker(s) logs ... "
			for (( j = 0; j < $2; j++ )); do
				let "payloadIndex = $i - 1"
				let "payloadIndex = $payloadIndex * $2"
				let "payloadIndex = $payloadIndex + $j"
				docker cp broker$j:/fuzzing/mosquitto.log ./Outputs/$payloadIndex.log >> ./Logs/$logFileName
			done
			echo -e "${GREEN}done${NC}"


			#Stopping and removing the broker containers
			echo -n -e "    --> Stopping the broker(s) container(s) ... "
			docker stop $(docker ps -a -q -n $2) >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}"
			echo -n -e "    --> Removing the broker(s) container(s) ... "
			docker rm $(docker ps -a -q -n $2) >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}"


		#If last loop
		else

			#We edit the docker-composes file with the right number of brokers and deploy them
			echo -n -e "    --> Preparing $restPayloads broker(s) container(s) ... "
			python3 docker-compose-editor.py 192.168.100.0 $restPayloads brokers >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}"
			echo -e "    --> Deploying $restPayloads broker(s) container(s) ... "
			cd ./Brokers_AttackContainer_Network/Brokers/
			docker-compose up -d --build >> ../../Logs/$logFileName
			cd ../../

			#Luanch of attack script
			echo -n -e "    --> Running the attack container ... "
			docker start -a attack >> ./Logs/$logFileName
			bash ./pause.sh >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}"


			#Logs recovery
			echo -n -e "    --> Getting the broker(s) logs ... "
			let "maxCount = $i * $nbLoops"
			for (( j = 0; j < $restPayloads; j++ )); do
				let "payloadIndex = $i - 1"
				let "payloadIndex = $payloadIndex * $2"
				let "payloadIndex = $payloadIndex + $j"
				docker cp broker$j:/fuzzing/mosquitto.log ./Outputs/$payloadIndex.log >> ./Logs/$logFileName
			done
			echo -e "${GREEN}done${NC}"

			#Stopping and removing the broker containers
			echo -n -e "    --> Stopping the broker(s) container(s) ... "
			docker stop $(docker ps -a -q -n $restPayloads) >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}"
			echo -n -e "    --> Removing the broker(s) container(s) ... "
			docker rm $(docker ps -a -q -n $restPayloads) >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}"


			##Rmoving the attack container and the network
			echo -n -e "    --> Removing the attack container ... "
			docker rm attack >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}"
			echo -n -e "    --> Removing the attack image ... "
			docker rmi fuzzing-attack >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}"
			echo -n -e "    --> Removing the network Fuzznet ... "
			docker network rm fuzznet >> ./Logs/$logFileName
			echo -e "${GREEN}done${NC}\n"

		fi

	done

fi











#
