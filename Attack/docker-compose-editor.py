#This program is intended to edit the docker-composes.yml file automatically
#It takes as a parameter the number of brokers we want to instantiate


#Libraries
import sys


#======================================================================

#Declarations of functions

#This function will generate MAC addresses starting at 00:00:00:00:01
def generateStaticMACAddresses(nbBrokers):
    macAddresses = []

    #We generate MAC addresses and store them in our array
    for number in range(2, nbBrokers+2):
        hex_num = hex(number)[2:].zfill(12)
        macAddresses.append("{}{}:{}{}:{}{}:{}{}:{}{}:{}{}".format(*hex_num))

    #The MAC address array is returned
    return macAddresses

#---------------------------------------------

#This function will write the IP addresses in a file
def writeIPandMACAddresses(filePath, ipMin, nbOfBrokers, ipAddrRange, macAddresses):
    #We then write in the file the IP and MAC addresses of the brokers
    file = open(filePath,"w")

    for i in range(ipMin, nbOfBrokers+ipMin):
        if i!=ipMin:
            file.write("\n")
        file.write(ipAddressesRange + str(i) + " " + macAddresses[i-ipMin])

    file.close()

#======================================================================

#Variable Declarations
file_ip_addresses = "./Brokers_AttackContainer_Network/AttackContainer_Network/Python/Scripts/ip-mac-addresses.txt"
file_docker_compose_brokers = "./Brokers_AttackContainer_Network/Brokers/docker-compose.yml"
file_docker_compose_attackContainer = "./Brokers_AttackContainer_Network/AttackContainer_Network/docker-compose.yml"

message_usage = 'Usage:\n     python3  docker-compose-editor.py  <network address/24>  <nb of brokers>  <file(s) to edit>\n\nNotes:\n   - The number of brokers must be between 1 and 250 included.\n   - The possible values for the last argument are:  "attack", "brokers" or "both".\n\nExample:\n   $ python3  docker-compose-editor.py  192.168.144.0  10  both\n'
message_seeUsage = "See usage with the -h or --help options."
message_errorNbArgs = "ERROR !\n  --> Too more or too few arguments."
message_errorNbBrokers = "ERROR !\n  --> Number of brokers incorrect."
message_errorNbBrokersIncorrect = "ERROR !\n --> The number of brokers is not between 1 and 250 included."
message_errorLastArgIncorrect = 'ERROR !\n  --> The last argument is incorrect.\n      The possible values are:  "attack", "brokers" or "both".'



#Help message
if len(sys.argv) == 2 and (sys.argv[1] == "-h" or sys.argv[1] == "--help") :
    print(message_usage)

#Not the right args number
elif len(sys.argv) != 4 :
    print(message_errorNbArgs)
    print(message_seeUsage)

#If the last argyment is not the right one
elif len(sys.argv) == 4 and (sys.argv[3]!="attack" and sys.argv[3]!="brokers" and sys.argv[3]!="both"):
    print(message_errorLastArgIncorrect)
    print(message_seeUsage)

#Otherwise
else:
    #We catch exceptions related to TypeError
    try:
        #Variable Declarations
        nbBrokers = int(sys.argv[2])
        ipAddressesRange = sys.argv[1][:-1]
        ipAddressMin = 5     #All addresses will start in a.b.c.5 with a, b and c chosen by the user.

        basicServiceName = "broker"

        #=======================

        #If the number of brokers is not between 1 and 250, an error message is displayed.
        if nbBrokers < 1 or nbBrokers > 250 :
            print(message_errorNbBrokersIncorrect)
            print(message_seeUsage)


        #Otherwise we'll move on to the next one.
        else:
            #We generate as many MAC addresses as there are brokers.
            macAddresses = generateStaticMACAddresses(nbBrokers)

            #We start by writing in a file the IP and MAC addresses of the brokers
            writeIPandMACAddresses(file_ip_addresses, ipAddressMin, nbBrokers, ipAddressesRange, macAddresses)

            #----------------------------------

            #Writing in the ./Docker-Compose_files/Brokers/docker-compose.yml file
            if sys.argv[3]=="brokers" or sys.argv[3]=="both":
                file = open(file_docker_compose_brokers,"w")
                for i in range(ipAddressMin, nbBrokers+ipAddressMin+1):

                    #Beginning of the file
                    if i==ipAddressMin:
                        file.write("version: '3.5'\n\nservices:\n  broker0:\n    build: ./Mosquitto\n    image: fuzzing-broker\n    mac_address: " + macAddresses[i-ipAddressMin] + "\n    networks:\n      fuzznet:\n        ipv4_address: " + ipAddressesRange + str(i) + "\n    container_name: " + basicServiceName + str(i-ipAddressMin))

                    #End of file
                    elif i==(nbBrokers+ipAddressMin):
                        file.write("\n\nnetworks:\n  fuzznet:\n    name: fuzznet\n    driver: bridge\n    ipam:\n      config:\n        - subnet: " + ipAddressesRange + "0/24")

                    #Middle of the file
                    else:
                        file.write("\n\n  broker" + str(i-ipAddressMin) + ":\n    image: fuzzing-broker\n    mac_address: " + macAddresses[i-ipAddressMin] + "\n    networks:\n      fuzznet:\n        ipv4_address: " + ipAddressesRange + str(i) + "\n    container_name: " + basicServiceName + str(i-ipAddressMin))

                file.close()


            #----------------------------------

            #Writing in the ./Docker-Compose_files/Brokers/docker-compose.yml file
            if sys.argv[3]=="attack" or sys.argv[3]=="both":
                file = open(file_docker_compose_attackContainer,"w")
                file.write("version: '3.5'\n\nservices:\n  attack:\n    build: ./Python\n    image: fuzzing-attack\n    mac_address: 00:00:00:00:00:01\n    networks:\n      fuzznet:\n        ipv4_address: " + ipAddressesRange + str(ipAddressMin-1) + "\n    container_name: attack")
                file.write("\n\nnetworks:\n  fuzznet:\n    name: fuzznet\n    driver: bridge\n    ipam:\n      config:\n        - subnet: " + ipAddressesRange + "0/24")
                file.close()



    #If TypeError
    except TypeError:
        print(message_errorNbBrokers)
        print(message_seeUsage)



#Completion message
print("Docker-compose editon is done !")
