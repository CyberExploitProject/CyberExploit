#Ce programme a pour but d'éditer le fichier docker-compose.yml automatiquement
#Il prend en paramètre le nombre de broker qu'on veut instancier


#Importations des libs
import sys


#======================================================================

#Déclarations des fonctions

#Cette fonction va générer des adresses MAC à partir de 00:00:00:00:00:01
def generateStaticMACAddresses(nbBrokers):
    #On déclare le tableau d'adresses MAC
    macAddresses = []
    
    #On génère des adresses MAC que l'on stocke dans notre tableau
    for number in range(2, nbBrokers+2):
        hex_num = hex(number)[2:].zfill(12)
        macAddresses.append("{}{}:{}{}:{}{}:{}{}:{}{}:{}{}".format(*hex_num))
    
    #On renvoie le tableau d'adresses MAC
    return macAddresses

#---------------------------------------------

#Cette fonction va écrire les adresses IP dans un fichier
def writeIPandMACAddresses(filePath, ipMin, nbOfBrokers, ipAddrRange, macAddresses):
    #On écrit ensuite dans le ficher les adresses IP et MAC des brokers
    file = open(filePath,"w")
    
    for i in range(ipMin, nbOfBrokers+ipMin):
        if i!=ipMin:
            file.write("\n")
        file.write(ipAddressesRange + str(i) + " " + macAddresses[i-ipMin])
        
    file.close()
    
#======================================================================

#Déclarations des variables
file_ip_addresses = "./Brokers_AttackContainer_Network/AttackContainer_Network/Python/Scripts/ip-mac-addresses.txt"
file_docker_compose_brokers = "./Brokers_AttackContainer_Network/Brokers/docker-compose.yml"
file_docker_compose_attackContainer = "./Brokers_AttackContainer_Network/AttackContainer_Network/docker-compose.yml"

message_usage = 'Usage:\n     python3  docker-compose-editor.py  <network address/24>  <nb of brokers>  <file(s) to edit>\n\nNotes:\n   - The number of brokers must be between 1 and 250 included.\n   - The possible values for the last argument are:  "attack", "brokers" or "both".\n\nExample:\n   $ python3  docker-compose-editor.py  192.168.144.0  10  both\n'
message_seeUsage = "See usage with the -h or --help options."
message_errorNbArgs = "ERROR !\n  --> Too more or too few arguments."
message_errorNbBrokers = "ERROR !\n  --> Number of brokers incorrect."
message_errorNbBrokersIncorrect = "ERROR !\n --> The number of brokers is not between 1 and 250 included."
message_errorLastArgIncorrect = 'ERROR !\n  --> The last argument is incorrect.\n      The possible values are:  "attack", "brokers" or "both".'



#Si on veut voir le message d'aide
if len(sys.argv) == 2 and (sys.argv[1] == "-h" or sys.argv[1] == "--help") :
    print(message_usage)

#Sinon s'il n'y a pas le bon nombre d'arguments
elif len(sys.argv) != 4 :
    print(message_errorNbArgs)
    print(message_seeUsage)
    
#Sinon si le dernier argument n'est pas un de ceux attendus
elif len(sys.argv) == 4 and (sys.argv[3]!="attack" and sys.argv[3]!="brokers" and sys.argv[3]!="both"):
    print(message_errorLastArgIncorrect)
    print(message_seeUsage)

#Sinon
else:
    #On attrape les exceptions en rapport avec TypeError
    try:
        #Déclarations des variables
        nbBrokers = int(sys.argv[2])
        ipAddressesRange = sys.argv[1][:-1]
        ipAddressMin = 5     #Toutes les adresses commenceront en a.b.c.5 avec a, b et c choisis par l'utilisateur
        
        basicServiceName = "broker"
        
        #=======================
        
        #Si le nombre de brokers n'est pas compris entre 1 et 250, on affiche un message d'erreur
        if nbBrokers < 1 or nbBrokers > 250 :
            print(message_errorNbBrokersIncorrect)
            print(message_seeUsage)            
            
            
        #Sinon on passe à la suite
        else:
            #On génère autant de MAC addresses que de broker
            macAddresses = generateStaticMACAddresses(nbBrokers)
            
            #On commence par écrire dans un fichier les adresses IP et MAC des brokers
            writeIPandMACAddresses(file_ip_addresses, ipAddressMin, nbBrokers, ipAddressesRange, macAddresses)
            
            #----------------------------------
            
            #On écrit dans le fichier ./Docker-Compose_files/Brokers/docker-compose.yml
            if sys.argv[3]=="brokers" or sys.argv[3]=="both":
                file = open(file_docker_compose_brokers,"w")
                for i in range(ipAddressMin, nbBrokers+ipAddressMin+1):
                    
                    #Début du fichier
                    if i==ipAddressMin:
                        file.write("version: '3.5'\n\nservices:\n  broker0:\n    build: ./Mosquitto\n    image: fuzzing-broker\n    mac_address: " + macAddresses[i-ipAddressMin] + "\n    networks:\n      fuzznet:\n        ipv4_address: " + ipAddressesRange + str(i) + "\n    container_name: " + basicServiceName + str(i-ipAddressMin))
                    
                    #Fin du fichier  
                    elif i==(nbBrokers+ipAddressMin):
                        file.write("\n\nnetworks:\n  fuzznet:\n    name: fuzznet\n    driver: bridge\n    ipam:\n      config:\n        - subnet: " + ipAddressesRange + "0/24")                
                    
                    #Milieu du fichier
                    else:
                        file.write("\n\n  broker" + str(i-ipAddressMin) + ":\n    image: fuzzing-broker\n    mac_address: " + macAddresses[i-ipAddressMin] + "\n    networks:\n      fuzznet:\n        ipv4_address: " + ipAddressesRange + str(i) + "\n    container_name: " + basicServiceName + str(i-ipAddressMin))
                    
                file.close()
                
            
            #----------------------------------

            #On érit dans le fichier ./Docker-Compose_files/AttackContainer/docker-compose.yml
            if sys.argv[3]=="attack" or sys.argv[3]=="both":
                file = open(file_docker_compose_attackContainer,"w")
                file.write("version: '3.5'\n\nservices:\n  attack:\n    build: ./Python\n    image: fuzzing-attack\n    mac_address: 00:00:00:00:00:01\n    networks:\n      fuzznet:\n        ipv4_address: " + ipAddressesRange + str(ipAddressMin-1) + "\n    container_name: attack")
                file.write("\n\nnetworks:\n  fuzznet:\n    name: fuzznet\n    driver: bridge\n    ipam:\n      config:\n        - subnet: " + ipAddressesRange + "0/24")
                file.close()
                
        
        
    #Si on a une TypeError
    except TypeError:
        print(message_errorNbBrokers)
        print(message_seeUsage)



#Message de fin
print("Docker-compose editon is done !")


