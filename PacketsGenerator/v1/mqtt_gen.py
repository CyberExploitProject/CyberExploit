import subprocess
from random import randint, choices
from scapy.contrib import mqtt as MQTT

def MQTT_Head(mqtt_type=0):
    #Cas Publish
    if mqtt_type == 3:
        qos = randint(0,2)
        retain = randint(0,1)
        if qos == 0 or qos == 2:
            dup = 0
        else:
            dup = randint(0,1)
    #Cas Subscribe
    if mqtt_type == 8:
        dup=0
        qos=1
        retain=0
    #Autres cas
    else:
        dup=0
        qos=0
        retain=0

    mqtt_fields = MQTT.MQTT(type=mqtt_type,
                            DUP=0,
                            QOS=0,
                            RETAIN=0,
                            len=None)
    return mqtt_fields

def makepl(topic = 0):
    characters = ['.', ')', '(', '-', '!', '?', '|', ';', '$', '&','[', ']', '>', '%', '=', '#', '*', '+', '•',  '~', '@', '£',
                 '·', '_', '{', '}', '©', '^', '®', '`',  '<', '→', '°', '€', '™', '›',  '♥', '←', '×', '§', '″', '′', 'Â', '█', '½', 'à', '…',
                 '“', '★', '”', '–', '●', 'â', '►', '−', '', ' ', '  ' '¢', '²', '¬', '░', '¶', '↑', '±', '¿', '▾', '═', '¦', '║', '―', '¥', '▓', '—', '‹', '─',
                 '▒', '：', '¼', '⊕', '▼', '▪', '†', '■', '’', '▀', '¨', '▄', '♫', '☆', 'é', '¯', '♦', '¤', '▲', 'è', '¸', '¾', 'Ã', '⋅', '‘', '∞',
                 '∙', '）', '↓', '、', '│', '（', '»', '，', '♪', '╩', '╚', '³', '・', '╦', '╣', '╔', '╗', '▬', '❤', 'ï', 'Ø', '¹', '≤', '‡', '√','«','»',
                 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
                 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
    pl = ""
    pl_length = randint(1,50)
    for i in range(0,pl_length):
        if topic == 1 and i == 0:
            pl += "/"
        j = randint(0,len(characters)-1)
        pl += str(characters[j])
    return pl#.encode()

def MQTT_Connect(p_user = b'itsmemario', p_pwd = b'itsmepwd', p_wtop = b'/itsmewilltopic/', p_wmsg = b'itsmewill'):
    ###Initialize variables###
    mqtt_type = 1
    mqtt_name = b'MQTT'
    mqtt_clientId = b'user_2'
    user = b''
    pwd = b''
    wtop = b''
    wmsg = b''
    wqosflag = 0
    #Activate random flags
    userflag = randint(0,1)
    pwdflag = userflag

    if userflag == 1:
        user = p_user
        pwd = p_pwd

    wflag = randint(0,1)
    wrflag = wflag
    if wflag == 1:
        wqosflag = randint(0,2)
        wtop = p_wtop
        wmsg = p_wmsg

    sessionflag = randint(0,1)
    keep = randint(20,120)
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_specific_fields =  MQTT.MQTTConnect(length=None,
                                             protoname=mqtt_name,
                                             protolevel=4,
                                             usernameflag=0,
                                             passwordflag=0,
                                             willretainflag=0,
                                             willQOSflag=0,
                                             willflag=0,
                                             cleansess=1,
                                             reserved=0,
                                             klive=60,
                                             clientIdlen=None,
                                             clientId=mqtt_clientId)
    return mqtt_fields, mqtt_specific_fields

def MQTT_Publish():
    ###Initialize variables###
    mqtt_type = 3
    mqtt_topic = makepl(topic=1)
    mqtt_msg_value = makepl()
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_specific_fields = MQTT.MQTTPublish(length=None,
                                             topic=mqtt_topic,
                                             msgid=None,
                                             value=mqtt_msg_value)
    return mqtt_fields, mqtt_specific_fields

def MQTT_Subscribe():
    ###Initialize variables###
    mqtt_type = 8
    mqtt_topic = makepl(topic=1)
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_specific_fields = MQTT.MQTTSubscribe(msgid=None,
                                              length=None,
                                              topic=mqtt_topic,
                                              QOS=0)
    return mqtt_fields, mqtt_specific_fields

def MQTT_Unsubscribe():
    mqtt_type = 10
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_topic = makepl(topic=1)
    id = randint(1,65534)
    mqtt_specific_fields = MQTT.MQTTUnsubscribe(msgid=id,
                                                    topics=mqtt_topic)
    return mqtt_fields, mqtt_specific_fields

def MQTT_Connack():
    mqtt_type = 2
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_specific_fields = MQTT.MQTTConnack(sessPresentFlag=1,
                                                retcode=0)
    return mqtt_fields, mqtt_specific_fields

def MQTT_Puback(id=1):
    mqtt_type = 4
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_specific_fields = MQTT.MQTTPuback(msgid=id)
    return mqtt_fields, mqtt_specific_fields

def MQTT_Pubrec(id=1):
    mqtt_type = 5
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_specific_fields = MQTT.MQTTPubrec(msgid=id)
    return mqtt_fields, mqtt_specific_fields

def MQTT_Pubrel(id=1):
    mqtt_type = 6
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_specific_fields = MQTT.MQTTPubrel(msgid=id)
    return mqtt_fields, mqtt_specific_fields

def MQTT_Pubcomp(id=1):
    mqtt_type = 7
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_specific_fields = MQTT.MQTTPubcomp(msgid=id)
    return mqtt_fields, mqtt_specific_fields

def MQTT_Suback(id=1):
    mqtt_type = 9
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_specific_fields = MQTT.MQTTSuback(msgid=id,
                                                retcode=0)
    return mqtt_fields, mqtt_specific_fields

def MQTT_Unsuback(id=1):
    mqtt_type = 11
    mqtt_fields = MQTT_Head(mqtt_type=mqtt_type)
    mqtt_specific_fields = MQTT.MQTTUnsuback(msgid=id)
    return mqtt_fields, mqtt_specific_fields


def MQTT_scenario():
    MQTT_type = ['MQTT_Connect','MQTT_Publish', 'MQTT_Subscribe', 'MQTT_Unsubscribe','MQTT_Connack', 'MQTT_Puback', 'MQTT_Pubrec', 'MQTT_Pubrel','MQTT_Pubcomp','MQTT_Suback','MQTT_Unsuback']
    #MQTT_type = ['MQTT_Connect','MQTT_Publish', 'MQTT_Subscribe']


    cycle_p = []
    nb_p = 3

    ## pour le random du pl on fait np.random.normal(0,0.5,1000)

    for i in range(1,nb_p):
        if i == 1 :
            p_type = choices(MQTT_type, weights=[990,1,1,1,1,1,1,1,1,1,1])
            #p_type = choices(MQTT_type, weights=[990,1,1,1])
        elif i == 2 :
            p_type = choices(MQTT_type, weights=[1,33,33,33,1,1,1,1,1,1,1])
            #p_type = choices(MQTT_type, weights=[1,2,200,2])
        #elif i == nb_p-1:
        #    p_type = choices(MQTT_type, weights=[1,25,15,1,1,1,1,1,1,1])
            #p_type = choices(MQTT_type, weights=[1,25,15,75])
        #else :
        #    p_type = choices(MQTT_type, weights=[1,75,20,1,1,1,1,1,1,1])
            #p_type = choices(MQTT_type, weights=[1,75,20,20])
        cycle_p.append(''.join(p_type))
        #cycle_p.append(p_type[0])

    #cycle_p = ['MQTT_Connect','MQTT_Publish']

    return cycle_p
