import socket
import sys
import time
import datetime
import subprocess
from scapy.all import *
from mqtt_gen import * #MQTT_Connect, MQTT_Publish, MQTT_Subscribe, MQTT_Unsubscribe, MQTT_scenario, MQTT_Connack
from random import randint


class Scenario:

    def __init__(self, outputFile, source_port=50000):
        self.source_port = source_port
        self.MQTT_port = 1883
        self.outputFile = outputFile

    def configure_firewall(self):
        subprocess.call(['iptables', '-A', '-p tcp', '--tcp-flags RST', 'RST', '-j', 'DROP']) # iptables -A OUTPUT -p tcp --tcp-flags RST RST -j DROP
        return 0

    def MQTT_socket(self, mqtt_type, file_send):
        ####MQTT packet type choice####
        if mqtt_type == 'MQTT_Connect':
            MQTT, MQTTspecific = MQTT_Connect()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.length),
                   str(packet.protoname),
                   str(packet.protolevel),
                   str(packet.usernameflag),
                   str(packet.passwordflag),
                   str(packet.willretainflag),
                   str(packet.willQOSflag),
                   str(packet.willflag),
                   str(packet.cleansess),
                   str(packet.reserved),
                   str(packet.klive),
                   str(packet.clientIdlen),
                   str(packet.clientId),
                   str(packet.wtoplen),
                   str(packet.willtopic),
                   str(packet.wmsglen),
                   str(packet.willmsg),
                   str(packet.userlen),
                   str(packet.username),
                   str(packet.passlen),
                   str(packet.password)]

        elif mqtt_type == 'MQTT_Publish':
                MQTT, MQTTspecific = MQTT_Publish()
                packet = (MQTT /
                          MQTTspecific)
                car = [str(packet.type),
                       str(packet.DUP),
                       str(packet.QOS),
                       str(packet.RETAIN),
                       str(packet.len),
                       str(packet.length),
                       str(packet.topic),
                       str(packet.msgid),
                       str(packet.value)]
        elif mqtt_type == 'MQTT_Subscribe':
            MQTT, MQTTspecific = MQTT_Subscribe()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.msgid),
                   str(packet.length),
                   str(packet.topic),
                   str(packet.QOS)]
        elif mqtt_type == 'MQTT_Unsubscribe':
            MQTT, MQTTspecific = MQTT_Unsubscribe()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.msgid),
                   str(packet.topics)]
        elif mqtt_type == 'MQTT_Connack':
            MQTT, MQTTspecific = MQTT_Connack()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.sessPresentFlag),
                   str(packet.retcode)]
        elif mqtt_type == 'MQTT_Puback':
            MQTT, MQTTspecific = MQTT_Puback()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.msgid)]
        elif mqtt_type == 'MQTT_Pubrec':
            MQTT, MQTTspecific = MQTT_Pubrec()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.msgid)]
        elif mqtt_type == 'MQTT_Pubrel':
            MQTT, MQTTspecific = MQTT_Pubrel()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.msgid)]
        elif mqtt_type == 'MQTT_Pubcomp':
            MQTT, MQTTspecific = MQTT_Pubcomp()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.msgid)]
        elif mqtt_type == 'MQTT_Suback':
            MQTT, MQTTspecific = MQTT_Suback()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.msgid),
                   str(packet.retcode)]
        elif mqtt_type == 'MQTT_Unsuback':
            MQTT, MQTTspecific = MQTT_Unsuback()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.msgid)]
        elif mqtt_type == 'MQTT_Suback':
            MQTT, MQTTspecific = MQTT_Pubrel()
            packet = (MQTT /
                      MQTTspecific)
            car = [str(packet.type),
                   str(packet.DUP),
                   str(packet.QOS),
                   str(packet.RETAIN),
                   str(packet.len),
                   str(packet.msgid)]

        file_send.write(':'.join(car) + '#PACKET#')
        return 0

    def scenario(self, verbose=False):
        file_send = open(self.outputFile, 'a')
        MQTT_packets = MQTT_scenario()
        for packet in MQTT_packets:
            self.MQTT_socket(packet, file_send)

        file_send.write('\n')
        file_send.close()

########################
#         MAIN
########################

#ARGS
outputFile = str(sys.argv[1])
nbOfScenarios = int(sys.argv[2])

#Creating and/or clearing the destination file
tmpfile = open(outputFile, "w")
tmpfile.close()

#Generating files
test = Scenario(outputFile)
for i in range(nbOfScenarios):
    print("Generating scenario #" + str(i))
    test.scenario()
